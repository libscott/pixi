// Generated by CoffeeScript 1.10.0
(function() {
  var _frame, _resX, _resY, _speed, _step, animate, animators, dot, grid, last, makeGrid, onVideo, renderer, stage, videoContext;

  makeGrid = function(x, y, w, h, factory) {
    var all, c, i, j, k, l, ref, ref1;
    all = new PIXI.Container();
    for (j = k = 0, ref = y - 1; 0 <= ref ? k <= ref : k >= ref; j = 0 <= ref ? ++k : --k) {
      for (i = l = 0, ref1 = x - 1; 0 <= ref1 ? l <= ref1 : l >= ref1; i = 0 <= ref1 ? ++l : --l) {
        c = factory();
        c.x = c.xx = i * w;
        c.y = c.yy = j * h;
        all.addChild(c);
      }
    }
    return all;
  };

  renderer = new PIXI.WebGLRenderer(1200, 800);

  document.body.appendChild(renderer.view);

  stage = new PIXI.Container();

  _frame = 0;

  _speed = 100;

  _step = 0;

  _resX = 160;

  _resY = 120;

  dot = new PIXI.Graphics();

  dot.beginFill(0xFFFFFF);

  dot.drawCircle(0, 0, 2);

  dot = dot.generateTexture();

  grid = makeGrid(_resX, _resY, 6, 6, function() {
    return new PIXI.Sprite(dot);
  });

  stage.addChild(grid);

  animators = [];

  animators.push(function() {
    return videoContext.canvas.getContext('2d').drawImage(videoContext.video, 0, 0);
  });

  last = null;

  animators.push(function() {
    var b, b2, bias, d, g, g2, getrgb, i, k, len, pixels, r, r2, ref, ref1, ref2, ref3, results, rgb2hex, s, setrgb, x, y;
    rgb2hex = function(r, g, b) {
      return ((r << 16) | (g << 8) | b).toString(16);
    };
    getrgb = function(d, i) {
      return [d[i * 4], d[i * 4 + 1], d[i * 4 + 2]];
    };
    setrgb = function(d, i, r, g, b) {
      d[i * 4] = r;
      d[i * 4 + 1] = b;
      return d[i * 4 + 2] = g;
    };
    bias = function(a, b, n) {
      return (a * n + b) / (n + 1);
    };
    pixels = videoContext.canvas.getContext('2d').getImageData(0, 0, _resX, _resY);
    d = pixels.data;
    if (!last) {
      last = d;
    }
    i = 0;
    ref = grid.children;
    results = [];
    for (k = 0, len = ref.length; k < len; k++) {
      s = ref[k];
      x = i % _resX;
      y = i / _resY >> 0;
      ref1 = getrgb(d, i), r = ref1[0], g = ref1[1], b = ref1[2];
      ref2 = getrgb(last, i), r2 = ref2[0], g2 = ref2[1], b2 = ref2[2];
      ref3 = [bias(r2, b, 4), bias(g2, r, 4), bias(b2, g, 4)], r = ref3[0], g = ref3[1], b = ref3[2];
      setrgb(last, i, r, g, b);
      s.tint = '0x' + rgb2hex(r, g, b);
      results.push(i++);
    }
    return results;
  });

  animate = function() {
    var animator, k, len;
    for (k = 0, len = animators.length; k < len; k++) {
      animator = animators[k];
      animator();
    }
    renderer.render(stage);
    _frame += 1;
    return _step = _frame / _speed;
  };

  videoContext = null;

  onVideo = function(vc) {
    videoContext = vc;
    window.vc = vc;
    return window.setInterval(animate, 1000 / 30);
  };

  initVideo(onVideo, _resX, _resY);

}).call(this);
